import { z } from "zod";

export const subjectSchema = z.object({
  id: z.coerce.number().optional(),
  name: z.string().min(1, { message: "Subject name is required!" }),
  teachers: z.array(z.string()).optional(), // teacher ids, made optional based on typical form flow
  description: z.string().optional(), // Added description field
});

export type SubjectSchema = z.infer<typeof subjectSchema>;

export const classSchema = z.object({
  id: z.coerce.number().optional(),
  name: z.string().min(1, { message: "Subject name is required!" }),
  capacity: z.coerce.number().min(1, { message: "Capacity name is required!" }),
  gradeId: z.coerce.number().min(1, { message: "Grade name is required!" }),
  supervisorId: z.coerce.string().optional(),
});

export type ClassSchema = z.infer<typeof classSchema>;

export const teacherSchema = z.object({
  id: z.string().optional(),
  username: z
    .string()
    .min(3, { message: "Username must be at least 3 characters long!" })
    .max(20, { message: "Username must be at most 20 characters long!" }),
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters long!" })
    .optional()
    .or(z.literal("")),
  name: z.string().min(1, { message: "First name is required!" }),
  surname: z.string().min(1, { message: "Last name is required!" }),
  email: z
    .string()
    .email({ message: "Invalid email address!" })
    .optional()
    .or(z.literal("")),
  phone: z.string().optional(),
  address: z.string(),
  img: z.string().optional(),
  bloodType: z.string().min(1, { message: "Blood Type is required!" }),
  birthday: z.coerce.date({ message: "Birthday is required!" }),
  sex: z.enum(["MALE", "FEMALE"], { message: "Sex is required!" }),
  subjects: z.array(z.string()).optional(), // subject ids
});

export type TeacherSchema = z.infer<typeof teacherSchema>;

export const studentSchema = z.object({
  id: z.string().optional(),
  username: z
    .string()
    .min(3, { message: "Username must be at least 3 characters long!" })
    .max(20, { message: "Username must be at most 20 characters long!" }),
  password: z
    .string()
    .min(8, { message: "Password must be at least 8 characters long!" })
    .optional()
    .or(z.literal("")),
  name: z.string().min(1, { message: "First name is required!" }),
  surname: z.string().min(1, { message: "Last name is required!" }),
  email: z
    .string()
    .email({ message: "Invalid email address!" })
    .optional()
    .or(z.literal("")),
  phone: z.string().optional(),
  address: z.string(),
  img: z.string().optional(),
  bloodType: z.string().min(1, { message: "Blood Type is required!" }),
  birthday: z.coerce.date({ message: "Birthday is required!" }),
  sex: z.enum(["MALE", "FEMALE"], { message: "Sex is required!" }),
  gradeId: z.coerce.number().min(1, { message: "Grade is required!" }),
  classId: z.coerce.number().min(1, { message: "Class is required!" }),
  parentId: z.string().min(1, { message: "Parent Id is required!" }),
});

export type StudentSchema = z.infer<typeof studentSchema>;

export const examSchema = z.object({
  id: z.coerce.number().optional(),
  title: z.string().min(1, { message: "Title name is required!" }),
  startTime: z.coerce.date({ message: "Start time is required!" }),
  endTime: z.coerce.date({ message: "End time is required!" }),
  lessonId: z.coerce.number({ message: "Lesson is required!" }),
});

export type ExamSchema = z.infer<typeof examSchema>;

export const lessonSchema = z.object({
  id: z.coerce.number().optional(),
  name: z.string().min(1, { message: "Lesson name is required!" }),
  day: z.enum(["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY"], {
    message: "Day is required!",
  }),
  startTime: z.coerce.date({ message: "Start time is required!" }),
  endTime: z.coerce.date({ message: "End time is required!" }),
  subjectId: z.coerce.number().min(1, { message: "Subject is required!" }),
  teacherId: z.string().min(1, { message: "Teacher is required!" }),
  classId: z.coerce.number().min(1, { message: "Class is required!" }),
});

export type LessonSchema = z.infer<typeof lessonSchema>;

// Base parent object properties - common to create, update, and general parent types
const parentBaseSchemaObj = {
  id: z.string().optional(), // ID is present for updates, optional for create (generated by DB/Clerk)
  username: z.string().min(3, { message: "Username must be at least 3 characters long!" }).max(20, { message: "Username must be at most 20 characters long!" }),
  name: z.string().min(1, { message: "First name is required!" }),
  surname: z.string().min(1, { message: "Last name is required!" }),
  email: z.string().email({ message: "Invalid email address!" }).min(1, { message: "Email is required" }), // Made email explicitly required
  phone: z.string().optional(), // Phone can be optional
  address: z.string().min(1, { message: "Address is required!" }),
  img: z.string().optional(), // For storing profile image URL
  studentIds: z.array(z.string()).optional(), // For linking students to parent
};

// Schema for creating a new parent - password is required
export const createParentSchema = z.object({
  ...parentBaseSchemaObj,
  password: z.string().min(8, { message: "Password must be at least 8 characters long!" }),
});
export type CreateParentSchema = z.infer<typeof createParentSchema>;

// Schema for updating an existing parent - password is optional (only if changing)
export const updateParentSchema = z.object({
  ...parentBaseSchemaObj,
  // For updates, id is usually required to identify the record, but it's already in parentBaseSchemaObj as optional.
  // If ID must be present for an update, it can be enforced in the action or a more specific update schema.
  password: z.string().min(8, { message: "Password must be at least 8 characters long!" }).optional().or(z.literal("")), // Allow empty string for clearing or not changing
});
export type UpdateParentSchema = z.infer<typeof updateParentSchema>;

// General ParentSchema (e.g., for reading from DB) - password should generally be excluded or optional
// This replaces the old ParentSchema. If actions.ts was using ParentSchema, it needs to be updated.
export const parentSchema = z.object({
  ...parentBaseSchemaObj,
  password: z.string().optional(), // Generic schema, password is not usually part of read data directly
});
export type ParentSchema = z.infer<typeof parentSchema>;
